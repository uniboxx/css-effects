---
interface Props {
  class?: string;
  duration?: string;
  size?: string;
  color?: string;
}
const {
  class: className,
  duration = '2s',
  size = '20px',
  color = '#ff0',
  ...rest
} = Astro.props;
const regex = /(?<quantity>[\d\.]+)(?<unit>[a-z]+)/;
const sizeResult = size.match(regex)!;
const sizeQuantity = +sizeResult.groups?.quantity!;
const sizeUnit = sizeResult.groups?.unit!;
const containerSize = `${+sizeQuantity * 2.5}${sizeUnit}`;
const durationResult = duration.match(regex)!;
const durationQuantity = +durationResult.groups?.quantity!;
const durationUnit = durationResult.groups?.unit!;
---

<div id="container21">
  {
    Array.from({ length: 3 }).map((_, idx) => {
      const delay = `${(durationQuantity * 0.3333 * idx).toFixed(2)}${durationUnit}`;
      return <span class={className} style={`--delay: ${delay}`} {...rest} />;
    })
  }
</div>

<style define:vars={{ duration, size, containerSize, color }}>
  #container21 {
    position: relative;
    width: var(--containerSize);
    height: var(--containerSize);
    span {
      position: absolute;
      top: 0;
      left: 0;
      animation: anim21 var(--duration) infinite linear;
      animation-delay: var(--delay);
      border-radius: 0.2em;
      background-color: var(--color);
      width: var(--size);
      height: var(--size);
    }
  }

  @keyframes anim21 {
    12.5%,
    25% {
      top: 0;
      left: 60%;
    }
    37.5%,
    50% {
      top: 60%;
      left: 60%;
    }
    62.5%,
    75% {
      top: 60%;
      left: 0;
    }
    87.5%,
    100% {
      top: 0;
      left: 0;
    }
  }
</style>
