---
interface Props {
  class?: string;
  duration?: string;
  text: string;
  colors?: string[];
  size?: string;
}
const {
  class: className,
  text,
  duration = '3s',
  colors = ['#ffffff1a', '#ff3e3e', '#00fa8a'],
  size = `${text.length * 0.9}em`,
} = Astro.props;

const [color1, color2, color3] = colors;
---

<div id="container44" class={className}>
  {
    Array.from({ length: 3 }).map(() => {
      return <div class="element" />;
    })
  }
  <h3>{text}</h3>
</div>

<style define:vars={{ duration, size, color1, color2, color3 }}>
  #container44 {
    display: flex;
    position: relative;
    justify-content: center;
    align-items: center;
    transition: var(--duration);
    width: var(--size);
    height: var(--size);
    .element {
      position: absolute;

      &:nth-of-type(1) {
        z-index: 2;
        backdrop-filter: blur(10px);
        border-radius: 50%;
        background-color: var(--color1);
        width: 100%;
        height: 100%;
      }
      &:nth-of-type(n + 2) {
        animation: anim44 var(--duration) ease-in-out infinite;
        width: calc(var(--size) * 0.4);
        height: calc(var(--size) * 0.4);
      }
      &:nth-of-type(2) {
        background-color: var(--color2);
      }
      &:nth-of-type(3) {
        animation-delay: calc(var(--duration) / -2);
        border-radius: 50%;
        background-color: var(--color3);
      }
    }
    h3 {
      z-index: 10;
      color: inherit;
    }
  }

  @keyframes anim44 {
    0% {
      transform: translate(-200%, 66.66%) rotate(0deg);
      z-index: 1;
    }
    50% {
      transform: translate(200%, -66.66%) rotate(180deg);
    }
    100% {
      transform: translate(-200%, 66.66%) rotate(360deg);
      z-index: 3;
    }
  }
</style>
