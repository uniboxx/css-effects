---
interface Props {
  class?: string;
  duration?: string;
  number?: number;
  boxColors?: string;
  maxSize?: string;
}
const {
  class: className,
  duration = '8s',
  number = 8,
  boxColors = '#09f, red, #fff',
  maxSize = '40px',
} = Astro.props;

const regex = /(?<quantity>[\d\.]+)(?<unit>[a-z]+)/;
const result = duration.match(regex)!;
const quantity = +result.groups?.quantity!;
const unit = result.groups?.unit!;

function randNum(maxPerc: number) {
  const num = Math.floor(Math.random() * (maxPerc * 10 + 1)) / 10;
  return `${num}%`;
}
function randColor() {
  const index = Math.trunc(Math.floor(Math.random() * colors.length * 10) / 10);
  return index;
}
const colors = boxColors.split(',');
const maxDelay = quantity + 1;
function randDelay() {
  const delay = Math.floor(Math.random() * maxDelay * 100) / 100;
  return `${delay}${unit}`;
}
---

<div id="container32" class={className}>
  {
    Array.from({ length: number }).map(() => {
      const randomTop = randNum(80);
      const randomLeft = randNum(80);
      const randomDelay = randDelay();
      const index = randColor();
      const randomColor = colors[index];
      return (
        <div
          class="square"
          style={`top: ${randomTop};left: ${randomLeft};--delay: ${randomDelay};--color: ${randomColor}`}
        />
      );
    })
  }
  <slot />
</div>

<style define:vars={{ duration, maxSize }}>
  #container32 {
    position: relative;
    z-index: 0;
    width: 100%;
    height: 100%;
    overflow: hidden;
    .square {
      position: absolute;
      transform: scale(0);
      z-index: -1;
      animation: anim32 var(--duration) infinite ease-in-out;
      animation-delay: var(--delay);
      border: 2px solid var(--color);
      width: var(--maxSize);
      height: var(--maxSize);
    }
  }
  @keyframes anim32 {
    0% {
      transform: rotate(0deg) scale(0);
      opacity: 1;
    }

    100% {
      transform: rotate(960deg) scale(1);
      opacity: 0;
    }
  }
</style>
