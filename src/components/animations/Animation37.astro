---
interface Props {
  class?: string;
  colors?: string;
  size?: string;
  duration?: string;
}
const {
  class: className,
  colors = '#06c8f0, #fff, #fe4e4e, #f0f',
  size = '37px',
  duration = '2s',
} = Astro.props;
const [semiSmall, sphere, semiBig, sphereSmall] = colors.split(',');
---

<div id="container37" class={className}>
  <div class="container">
    <div class="loader">
      <div class="ball"></div>
    </div>
  </div>
</div>

<style define:vars={{ semiSmall, sphere, semiBig, sphereSmall, size, duration }}
>
  #container37 {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100%;
    overflow: hidden;
    .container {
      position: relative;
      top: calc(var(--size) * -1.5);
      width: calc(var(--size) * 2);
      height: calc(var(--size) * 2);
      &::before,
      &::after {
        position: absolute;
        content: '';
      }
      &::before {
        top: calc(var(--size) * 2);
        z-index: 1;
        animation: circle37 var(--duration) linear infinite alternate;
        border-radius: 50%;
        background: var(--sphere);
        width: calc(var(--size) * 2);
        height: calc(var(--size) * 2);
      }
      &::after {
        top: calc(var(--size) * 4);
        left: -150%;
        border-radius: 50%;
        background: var(--semiBig);
        width: calc(var(--size) * 8);
        height: calc(var(--size) * 8);
      }
      .loader {
        position: relative;
        animation: semicircle37 var(--duration) linear infinite alternate;
        width: calc(var(--size) * 2);
        height: calc(var(--size) * 2);
        &::before {
          --radius: calc(var(--size) * 2);
          position: absolute;
          bottom: 0;
          border-bottom-right-radius: var(--radius);
          border-bottom-left-radius: var(--radius);
          background: var(--semiSmall);
          width: 100%;
          height: 50%;
          content: '';
        }
        .ball {
          position: absolute;
          top: 50%;
          transform: translateY(-100%) translateX(calc(var(--size) / -2));
          animation: ball37 var(--duration) linear infinite alternate;
          border-radius: 50%;
          background-color: var(--sphereSmall);
          width: calc(var(--size) / 2);
          height: calc(var(--size) / 2);
        }
      }
    }
  }
  @keyframes ball37 {
    from {
      transform: translateY(-100%) translateX(calc(var(--size) / -2));
    }
    to {
      transform: translateY(-100%) translateX(calc(var(--size) * 2));
    }
  }
  @keyframes semicircle37 {
    0% {
      transform: rotate(50deg);
    }
    100% {
      transform: rotate(-50deg);
    }
  }
  @keyframes circle37 {
    from {
      transform: translateX(calc(var(--size) / 4));
    }
    to {
      transform: translateX(calc(var(--size) / -4));
    }
  }
</style>
