---
interface Props {
  class?: string;
  duration?: string;
  size?: string;
}
const { class: className, duration = '8s', size = '10em' } = Astro.props;
---

<div id="container45" class={className}>
  <p class="letter">M</p>
  <div class="orbit">
    <p style={`--divider: ${parseFloat(size) / 5}`}></p>
    <div class="moon"></div>
  </div>
  <p class="letter">N</p>
</div>

<style define:vars={{ duration, size }}>
  #container45 {
    --fz: calc(var(--size) / 9);
    display: flex;
    position: relative;
    justify-content: space-between;
    align-items: center;
    border: 1px solid #fff;
    width: var(--size);
    height: var(--size);
    .letter {
      font-size: var(--fz);
    }
    .orbit {
      --orbitSize: calc(var(--size) / 1.68);
      display: flex;
      position: relative;
      justify-content: center;
      align-items: center;
      border-radius: 50%;
      width: var(--orbitSize);
      height: var(--orbitSize);
      p {
        --pSize: calc(var(--fz) * 0.8);
        --origin: calc(var(--orbitSize) / var(--divider));
        position: absolute;
        top: 50%;
        left: 0%;
        transform: translate(-50%, -50%);
        width: var(--pSize);
        height: var(--pSize);
        line-height: 0.8;
        &::before {
          position: absolute;
          top: 0%;
          left: 0%;
          transform-origin: var(--origin);
          animation: anim45 var(--duration) linear infinite;
          width: 100%;
          height: 100%;
          content: 'O';
          font-size: var(--fz);
        }
      }

      .moon {
        box-shadow:
          0 0 0 calc(var(--fz) / 5.8333) #ffffff0d,
          0 0 0 calc(var(--fz) / 5.8333 * 2) #ffffff0d,
          0 0 0 calc(var(--fz) / 5.8333 * 3) #ffffff0d;
        border-radius: 50%;
        background-color: #f5f5f5;
        width: calc(var(--fz) * 2.28);
        height: calc(var(--fz) * 2.28);
      }
    }
  }
  @keyframes anim45 {
    100% {
      transform: rotate(360deg);
    }
  }
</style>
