---
interface Props {
  class?: string;
  duration?: string;
  size?: string;
  text?: string;
}
const {
  class: className,
  duration = '8s',
  size = '10em',
  text = 'scanning...',
} = Astro.props;
---

<div id="container46" class={className}>
  <div class="fingerprint"></div>
  <h3>{text}</h3>
</div>

<style define:vars={{ duration, size }}>
  #container46 {
    display: flex;
    position: relative;
    flex-direction: column;
    align-items: center;
    transition: var(--duration);
    border: 1px solid #fff;
    width: var(--size);
    height: var(--size);
    color: #fff;
    .fingerprint {
      position: relative;
    }
    .orbit {
      --orbitSize: calc(var(--size) / 1.68);
      display: flex;
      position: relative;
      justify-content: center;
      align-items: center;
      border-radius: 50%;
      width: var(--orbitSize);
      height: var(--orbitSize);
      p {
        --pSize: calc(var(--fz) * 0.8);
        --origin: calc(var(--orbitSize) / var(--divider));
        position: absolute;
        top: 50%;
        left: 0%;
        transform: translate(-50%, -50%);
        width: var(--pSize);
        height: var(--pSize);
        line-height: 0.8;
        &::before {
          position: absolute;
          top: 0%;
          left: 0%;
          transform-origin: var(--origin);
          animation: anim46 var(--duration) linear infinite;
          width: 100%;
          height: 100%;
          content: 'O';
          font-size: var(--fz);
        }
      }

      .moon {
        box-shadow:
          0 0 0 calc(var(--fz) / 5.8333) #ffffff0d,
          0 0 0 calc(var(--fz) / 5.8333 * 2) #ffffff0d,
          0 0 0 calc(var(--fz) / 5.8333 * 3) #ffffff0d;
        border-radius: 50%;
        background-color: #f5f5f5;
        width: calc(var(--fz) * 2.28);
        height: calc(var(--fz) * 2.28);
      }
    }
  }
  @keyframes anim46 {
    100% {
      transform: rotate(360deg);
    }
  }
</style>
