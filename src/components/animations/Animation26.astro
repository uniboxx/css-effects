---
interface Props {
  class?: string;
  duration?: string;
  size?: string;
  colors?: string;
  circles?: number;
}
const {
  class: className,
  colors = '#fff, #ccae62, #218c74, #eb4d4b',
  circles = colors.split(',').length,
  duration = '1s',
  size = '80px',
} = Astro.props;
const regex = /(?<quantity>[\d\.]+)(?<unit>[a-z]+)/;
const result = size.match(regex)!;
const quantity = +result?.groups?.quantity!;
const unit = result?.groups?.unit;
const borderSize = `${quantity * 0.025}${unit}`;
---

<div id="container26" class={className}>
  {
    Array.from({ length: circles }).map((el, idx) => {
      const circleSize =
        idx === 0
          ? `${quantity / circles / 2}${unit}`
          : `${(quantity / circles) * (idx + 1)}${unit}`;
      const color = colors.split(',')[idx];
      return (
        <div
          class="circle"
          style={`--circleSize: ${circleSize};--color: ${color}`}
        />
      );
    })
  }
</div>

<style define:vars={{ duration, size, borderSize }}>
  #container26 {
    position: relative;
    width: var(--size);
    height: var(--size);
    .circle {
      position: absolute;
      top: calc(50% - var(--circleSize) / 2);
      left: calc(50% - var(--circleSize) / 2);
      border: var(--borderSize) solid transparent;
      border-right-color: var(--color);
      border-left-color: var(--color);
      border-radius: 50%;
      width: var(--circleSize);
      height: var(--circleSize);
      &:not(:first-of-type) {
        animation: anim26 3s infinite linear;
        &:nth-of-type(odd) {
          animation-direction: reverse;
        }
      }
      &:nth-of-type(1) {
        background-color: var(--color);
      }
    }
  }

  @keyframes anim26 {
    to {
      transform: rotate(360deg);
    }
  }
</style>
