---
interface Props {
  class?: string;
  duration?: string;
  boxColors?: {
    color: string;
    shadow: string;
  }[];
}
const {
  class: className,
  duration = '5s',
  boxColors = [
    { color: '#41c1fb', shadow: '#1fa4e0' },
    { color: '#e0bd1f', shadow: '#bb9e1b' },
  ],
} = Astro.props;
const regex = /(?<quantity>[\d\.]+)(?<unit>[a-z]+)/;
const result = duration.match(regex)!;
const quantity = +result.groups?.quantity!;
const unit = result.groups?.unit!;
---

<div id="container33" class={className}>
  {
    boxColors.map((_, idx) => {
      const { color, shadow } = boxColors[idx];
      const delay = `${(quantity / 2) * idx}${unit}`;
      return (
        <div class="glass">
          <div class="inner">
            <div
              class="liquid"
              style={`background-color: ${color};--shadow: ${shadow};--delay: ${delay}`}
            />
          </div>
        </div>
      );
    })
  }
</div>

<style define:vars={{ duration }}>
  #container33 {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 20px;
    width: 100%;
    height: 100%;
    .glass {
      position: relative;
      width: 40%;
      height: 90%;
      .inner {
        position: relative;
        border: 4px solid transparent;
        border-radius: 20px;
        background-color: #ffffff1a;
        width: 100%;
        height: 100%;
        &::before,
        &::after {
          position: absolute;
          content: '';
        }
        &::before {
          top: -7px;
          left: 50%;
          transform: translateX(-50%);
          box-shadow: 0 5px 0 #222;
          border: 5px solid #444;
          border-radius: 50%;
          width: 110%;
          height: 15%;
        }
        &::after {
          top: 20%;
          left: 10%;
          background-color: #ffffff1a;
          width: 25%;
          height: 60%;
        }
      }
      .liquid {
        position: absolute;
        top: 20%;
        right: 3px;
        bottom: 2px;
        left: 3px;
        animation: anim33 var(--duration) infinite linear;
        animation-delay: var(--delay);
        border-bottom-right-radius: 20px;
        border-bottom-left-radius: 20px;
        &::before {
          position: absolute;
          top: -6px;
          left: 0;
          border-radius: 50%;
          background-color: var(--shadow);
          width: 100%;
          height: 10px;
          content: '';
        }
      }
    }
  }
  @keyframes anim33 {
    0%,
    20% {
      top: 20%;
    }
    20%,
    70% {
      top: 80%;
    }
    100% {
      top: 20%;
    }
  }
</style>
