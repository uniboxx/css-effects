---
interface Props {
  class?: string;
  duration?: string;
  text: string;
  size?: string;
  number?: number;
  ringColor?: string;
}
const {
  class: className,
  duration = '3s',
  text,
  size = '90px',
  number = 3,
  ringColor = '#09f',
  ...rest
} = Astro.props;

function randomRad() {
  let radius = '';
  for (let i = 1; i <= 8; i++) {
    const value = `${Math.floor(Math.random() * 31 + 40)}% `;
    radius += value;
    if (i === 4) radius += '/ ';
  }
  return radius;
}
---

<div id="container34" class={className} {...rest}>
  <h3>{text}</h3>
  {
    Array.from({ length: number }).map((_, idx) => {
      const direction = idx % 2 === 0 ? 'normal' : 'reverse';
      let radius = randomRad();
      return (
        <div
          class="ring"
          style={`border-radius: ${radius};--direction: ${direction}`}
        />
      );
    })
  }
</div>

<style define:vars={{ duration, size, ringColor }}>
  #container34 {
    display: flex;
    position: relative;
    justify-content: center;
    align-items: center;
    width: var(--size);
    height: var(--size);
    overflow: hidden;
    h3 {
      font: inherit;
    }
    .ring {
      --ringSize: 80%;
      position: absolute;
      top: calc((100% - var(--ringSize)) / 2);
      left: calc((100% - var(--ringSize)) / 2);
      animation: loading34 var(--duration) infinite linear;
      animation-direction: var(--direction);
      border: 0.05em solid var(--ringColor);
      width: var(--ringSize);
      height: var(--ringSize);
    }
  }

  @keyframes loading34 {
    to {
      transform: rotate(360deg);
    }
  }
</style>
