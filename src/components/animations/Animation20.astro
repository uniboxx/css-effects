---
interface Props {
  class?: string;
  duration?: string;
  size?: string;
}
const {
  class: className,
  duration = '1s',
  size = '20px',
  ...rest
} = Astro.props;
const regex = /(?<quantity>[\d\.]+)(?<unit>[a-z]+)/;
const result = size.match(regex)!;
const quantity = +result.groups?.quantity!;
const unit = result.groups?.unit!;
const containerSize = `${quantity * 2}${unit}`;
---

<div id="container20" class={className} {...rest}>
  <span></span><span></span><span></span><span></span>
</div>

<style define:vars={{ duration, size, containerSize }}>
  #container20 {
    position: relative;
    transform: rotate(45deg);
    animation: anim20 var(--duration) infinite linear;
    width: var(--containerSize);
    height: var(--containerSize);
    span {
      position: absolute;
      animation: anim20Spans var(--duration) infinite linear;
      width: var(--size);
      height: var(--size);
      &:nth-of-type(1) {
        top: 0;
        left: 0;
        background-color: orange;
      }
      &:nth-of-type(2) {
        top: 0;
        right: 0;
        background-color: blue;
      }
      &:nth-of-type(3) {
        right: 0;
        bottom: 0;
        background-color: #fff;
      }
      &:nth-of-type(4) {
        bottom: 0;
        left: 0;
        background-color: yellow;
      }
    }
  }
  @keyframes anim20 {
    0%,
    10% {
      width: var(--containerSize);
      height: var(--containerSize);
    }

    50% {
      width: calc(var(--containerSize) * 1.5);
      height: calc(var(--containerSize) * 1.5);
    }
    90%,
    100% {
      width: var(--containerSize);
      height: var(--containerSize);
    }
  }
  @keyframes anim20Spans {
    0%,
    10% {
      transform: rotate(0deg);
    }

    50% {
      transform: rotate(90deg);
    }

    90%,
    100% {
      transform: rotate(90deg);
    }
  }
</style>
