---
interface Props {
  class?: string;
  duration?: string;
  transitionDuration?: string;
}
const {
  class: className,
  duration = '3s',
  transitionDuration = '2s',
  ...rest
} = Astro.props;
---

<div id="container17" class={className} data-duration={duration} {...rest}>
  <slot />
</div>

<style define:vars={{ transitionDuration }}>
  #container17 {
    transition: var(--transitionDuration);
  }
</style>

<script>
  const container = document.getElementById('container17') as HTMLDivElement;
  const duration = container.dataset.duration!;
  const regex = /(?<time>[\d\.]+)(?<unit>(s|ms)$)/;
  const result = duration.match(regex)!;
  let time = +result.groups?.time!;
  const unit = result.groups?.unit!;
  if (unit === 's') {
    time *= 1000;
  }
  function hslGen() {
    const h = Math.floor(Math.random() * 361);
    const s = parseFloat(
      (Math.trunc(Math.random() * (100 * 10 + 1)) / 10).toFixed(1)
    );
    const l = parseFloat(
      (Math.trunc(Math.random() * (100 * 10 + 1)) / 10).toFixed(1)
    );
    return {
      bg: `hsl(${h} ${s}% ${l}%)`,
      color: `hsl(${(h + 170) % 360} ${s}% ${Math.round((100 - l) * 10) / 10}%)`,
    };
  }
  function changeBg() {
    const colors = hslGen();
    container.style.backgroundColor = colors.bg;
    container.style.color = colors.color;
  }
  setInterval(changeBg, time);
  changeBg();
</script>
