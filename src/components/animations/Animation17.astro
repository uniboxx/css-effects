---
import { Image } from 'astro:assets';

interface Props {
  class?: string;
  images: ImageMetadata[];
  imageTime?: string;
  duration?: string;
  width: number;
  height: number;
}
const {
  class: className,
  images,
  imageTime = '3s',
  width,
  height,
  duration = '.5s',
} = Astro.props;

const regex = /(?<time>[\d\.]+)(?<unit>(s|ms)$)/;
const { groups } = imageTime.match(regex) ?? {};
const time = +groups?.time!;
const unit = groups?.unit!;
const imagesNumber = images.length;
---

<div
  class:list={[className, 'slider']}
  data-length={imagesNumber.toString()}
  data-time={time}
  data-unit={unit.toString()}
>
  {
    images.map((img, index) => (
      <Image
        class:list={['imgAnim17', { visible: index === 0 }]}
        src={img}
        alt={`${index + 1}`}
        loading={index === 0 ? 'eager' : 'lazy'}
        width={width}
        height={height}
      />
    ))
  }
</div>

<style define:vars={{ width, height, duration }}>
  .slider {
    position: relative;
    width: calc(var(--width) * 1px);
    /* overflow: hidden; */
    .imgAnim17 {
      position: absolute;
      opacity: 0;
      transition: opacity var(--duration) ease-in-out;
      object-fit: cover;
      &.visible {
        opacity: 1;
      }
    }
  }
</style>

<script>
  const imgs = Array.from(
    document.querySelectorAll('.imgAnim17')
  ) as HTMLImageElement[];
  const slider = document.querySelector('.slider') as HTMLDivElement;
  const length = +slider.dataset.length!;
  const time = +slider.dataset.time!;
  const unit = slider.dataset.unit!;
  let timeToKeep = time;
  if (unit === 's') {
    timeToKeep = time * 1000;
    // console.log('ðŸš€ ~ timeToKeep:', timeToKeep);
  }

  function switcher() {
    let index = 0;
    const interval = setInterval(() => {
      imgs[index].classList.remove('visible');
      index = (index + 1) % length;
      imgs[index].classList.add('visible');
    }, timeToKeep);
  }

  switcher();
</script>
