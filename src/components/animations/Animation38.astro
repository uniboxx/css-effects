---
interface Props {
  class?: string;
  duration?: string;
  size?: string;
  ringColor?: string;
}
const {
  class: className,
  size = '60px',
  ringColor = '#00c3ff',
  duration = '2s',
} = Astro.props;
const number = 2 / parseFloat(duration);
---

<div class="loader38" class={className}>
  {
    Array.from({ length: 20 }).map((_, idx) => {
      return <span style={`--n: ${idx}`} />;
    })
  }
</div>

<style define:vars={{ duration, size, ringColor, number }}>
  .loader38 {
    position: relative;
    border-radius: 50%;
    width: var(--size);
    height: var(--size);

    span {
      position: absolute;
      top: 0;
      left: 0;
      transform: rotate(calc(18deg * var(--n)));
      width: 100%;
      height: 100%;
      &::before {
        position: absolute;
        top: 0;
        left: 0;
        animation: loading38 var(--duration) linear infinite;
        animation-delay: calc(var(--duration) / 20 * var(--number) * var(--n));
        box-shadow:
          0 0 calc(var(--size) / 12) var(--ringColor),
          0 0 calc(var(--size) / 6) var(--ringColor),
          0 0 calc(var(--size) / 3) var(--ringColor),
          0 0 calc(var(--size) / 2) var(--ringColor),
          0 0 calc(var(--size) / 3 * 2) var(--ringColor),
          0 0 calc(var(--size) / 3 * 2.5) var(--ringColor);
        border-radius: 50%;
        background: var(--ringColor);
        width: calc(var(--size) / 8);
        height: calc(var(--size) / 8);
        content: '';
      }
    }
  }

  @keyframes loading38 {
    0% {
      transform: scale(1);
    }
    80%,
    100% {
      transform: scale(0);
    }
  }
</style>
