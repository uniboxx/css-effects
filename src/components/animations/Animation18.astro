---
interface Props {
  class?: string;
  intervalTime?: string;
}
const { class: className, intervalTime = '6s' } = Astro.props;
const regex = /(?<time>[\d\.]+)(?<unit>(s|ms)$)/;
const { groups } = intervalTime.match(regex) ?? {};
const time = groups?.time!;

const unit = groups?.unit!;

const duration = `${+time / 1}${unit}`;

function hslGen() {
  const h = Math.floor(Math.random() * 361);
  const s = parseFloat(
    (Math.floor(Math.random() * (100 * 10 + 1)) / 10).toFixed(1)
  );
  const l = parseFloat(
    (Math.floor(Math.random() * (100 * 10 + 1)) / 10).toFixed(1)
  );
  return {
    bg: `hsl(${h} ${s}% ${l}%)`,
    color: `hsl(${(h + 180) % 360} ${s}% ${Math.round((100 - l) * 10) / 10}%)`,
  };
}
const { color, bg } = hslGen();
---

<div
  class:list={[className, 'container18']}
  data-time={time}
  data-unit={unit}
  data-hslGen={hslGen}
>
  <slot />
</div>

<style define:vars={{ color, bg, duration }}>
  .container18 {
    transition: var(--duration);
    background-color: var(--bg);
    width: 100%;
    height: 100%;
    color: var(--color);
  }
</style>

<script>
  const container = document.querySelector('.container18') as HTMLDivElement;
  let time = +container.dataset.time!;
  const unit = container.dataset.unit!;
  if (unit === 's') {
    time *= 1000;
  }
  function hslGen() {
    const h = Math.floor(Math.random() * 361);
    const s = parseFloat(
      (Math.trunc(Math.random() * (100 * 10 + 1)) / 10).toFixed(1)
    );
    const l = parseFloat(
      (Math.trunc(Math.random() * (100 * 10 + 1)) / 10).toFixed(1)
    );
    return {
      bg: `hsl(${h} ${s}% ${l}%)`,
      color: `hsl(${(h + 180) % 360} ${s}% ${Math.round((100 - l) * 10) / 10}%)`,
    };
  }
  const interval = setInterval(() => {
    const colors = hslGen();
    // console.log('ðŸš€ ~ colors:', colors);

    container.style.backgroundColor = colors.bg;
    container.style.color = colors.color;
  }, time);
</script>
