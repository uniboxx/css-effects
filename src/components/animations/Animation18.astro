---
import { Image } from 'astro:assets';

interface Props {
  class?: string;
  images: { image: ImageMetadata; alt: string }[];
  imageTime?: string;
  duration?: string;
  transitionDuration?: string;
}
const {
  class: className,
  images,
  duration = '3s',
  transitionDuration = '2s',
  ...rest
} = Astro.props;
---

<div id="slider18" class={className} data-duration={duration} {...rest}>
  {
    images.map((img, idx) => (
      <Image
        class:list={[{ visible: idx === 0 }]}
        src={img.image}
        alt={img.alt}
        loading={idx === 0 ? 'eager' : 'lazy'}
      />
    ))
  }
</div>

<style define:vars={{ transitionDuration }}>
  #slider18 {
    position: relative;
    img {
      position: absolute;
      opacity: 0;
      transition: var(--transitionDuration) ease-in-out;
      width: auto;
      height: auto;
      object-fit: cover;
      &.visible {
        opacity: 1;
      }
    }
  }
</style>

<script>
  const slider = document.getElementById('slider18') as HTMLDivElement;
  const imgs = slider.querySelectorAll('img') as NodeListOf<HTMLImageElement>;
  const length = imgs.length;
  const duration = slider.dataset.duration!;
  const regex = /(?<time>[\d\.]+)(?<unit>(s|ms)$)/;
  const result = duration.match(regex)!;
  const time = +result.groups?.time!;
  const unit = result.groups?.unit!;
  let timeToKeep = time;
  if (unit === 's') {
    timeToKeep = time * 1000;
  }

  function switcher() {
    let index = 0;
    setInterval(() => {
      imgs[index].classList.remove('visible');
      index = (index + 1) % length;
      imgs[index].classList.add('visible');
    }, timeToKeep);
  }

  switcher();
</script>
