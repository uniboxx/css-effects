---
interface Props {
  class?: string;
  duration?: string;
  size?: string;
  colors?: string[];
}
const {
  class: className,
  duration = '2s',
  size = '80px',
  colors = ['#001d30', '#51eeee'],
} = Astro.props;
const [color1, color2] = colors;
---

<div id="container35" class={className}>
  <div class="ring35"></div>
</div>

<style define:vars={{ duration, size, color1, color2 }}>
  #container35 {
    display: flex;
    position: relative;
    justify-content: center;
    align-items: center;
    background-color: var(--color1);
    width: var(--size);
    height: var(--size);
    .ring35 {
      position: absolute;
      animation: loading35 var(--duration) infinite linear;
      border-radius: 50%;
      background: linear-gradient(0deg, var(--color1) 40%, var(--color2) 100%);
      width: 100%;
      height: 100%;
      &::before,
      &::after {
        position: absolute;
        border-radius: 50%;
        content: '';
      }
      &::before {
        inset: calc(var(--size) / 12) calc(var(--size) / 8) 0 0;
        background: var(--color1);
      }
      &::after {
        top: 30%;
        right: -3%;
        box-shadow:
          0 0 calc(var(--size) * 0.033 * 5) var(--color2),
          0 0 calc(var(--size) * 0.033 * 10) var(--color2),
          0 0 calc(var(--size) * 0.033 * 15) var(--color2);
        background-color: var(--color2);
        width: 25%;
        height: 25%;
      }
    }
  }

  @keyframes loading35 {
    100% {
      transform: rotate(360deg);
    }
  }
</style>
