---
interface Props {
  class?: string;
  size?: string;
  duration?: string;
  color?: string;
}
const {
  class: className,
  size = '90px',
  duration = '1s',
  color = '#fff',
  ...rest
} = Astro.props;
---

<div id="container27" class={className} {...rest}>
  {
    Array.from({ length: 9 }).map((_, idx) => {
      let delay = '0s';
      if (idx >= 3 && idx <= 5) delay = '0.1s';
      if (idx >= 6 && idx <= 9) delay = '0.2s';

      return <span style={`--delay: ${delay}`} />;
    })
  }
</div>

<style define:vars={{ size, duration, color }}>
  #container27 {
    display: flex;
    flex-direction: column;
    flex-wrap: wrap;
    width: var(--size);
    height: var(--size);
    span {
      position: relative;
      width: calc(var(--size) / 3);
      height: calc(var(--size) / 3);
      &::before {
        position: absolute;
        top: 0;
        left: 0;
        animation: loading27 var(--duration) infinite linear;
        animation-delay: var(--delay);
        background-color: var(--color);
        width: 100%;
        height: 100%;
        content: '';
      }
    }
  }
  @keyframes loading27 {
    to {
      width: 0;
      height: 0;
    }
  }
</style>
