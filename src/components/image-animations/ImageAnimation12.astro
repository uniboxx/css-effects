---
/*
INFORMATIONS
set: 
- image as imagemetadata
- alt as string
- width and/or height as numbers
set optionally:
- class as string
- duration as string 'value and s | ms' 
- format as string
- positionY as string (y value, default center)
*/
import { Image } from 'astro:assets';
import { getImage } from 'astro:assets';

interface Props {
  class?: string;
  duration?: string;
  image: ImageMetadata;
  alt: string;
  width?: number;
  height?: number;
  format?: string;
  loading?: string;
  positionY?: string;
}
// prettier-ignore
const { class:className, duration='.5s', image, alt, width, height, format = 'webp',loading='lazy', positionY='center', ...attrs } = Astro.props;

const optImg = await getImage({ src: image, width, height, format });
---

<div id="container12" {...attrs} style={`--url: url(${optImg.src})`}>
  <Image class="image" src={image} alt={alt} width={10} height={10} />
  <div class="bg-image"></div>
  <div class="bg-image"></div>
  <div class="caption"><slot /></div>
</div>

<style define:vars={{ duration, positionY }}>
  #container12 {
    position: relative;
    width: 100%;
    height: 100%;

    .image {
      position: relative;
      z-index: -2;
      width: 100%;
      height: 100%;
    }

    .bg-image {
      position: absolute;
      top: 0;
      transition: var(--duration);
      background-image: var(--url);
      background-size: cover;
      background-repeat: no-repeat;
      background-position-y: var(--positionY);
      width: 50%;
      height: 100%;

      &:nth-of-type(1) {
        left: 0;
        transform-origin: bottom;
        background-position-x: left;
      }
      &:nth-of-type(2) {
        right: 0;
        transform-origin: top;
        background-position-x: right;
      }
    }
    .caption {
      position: absolute;
      z-index: -1;
      inset: 0;
      width: 100%;
      height: 100%;
    }

    &:hover {
      .bg-image {
        &:nth-of-type(1) {
          transform: rotateX(90deg) translateY(50%);
        }
        &:nth-of-type(2) {
          transform: rotateX(90deg) translateY(-50%);
        }
      }
      a {
        z-index: 1;
      }
    }
  }
</style>
