---
import { Image } from 'astro:assets';

interface Props {
  class?: string;
  duration?: string;
  mediaData: {
    videos: Record<string, () => Promise<unknown>>;
    images: { [key: string]: () => Promise<{ default: ImageMetadata }> };
    alts: string[];
    width?: number;
    height?: number;
    format?: string;
  };
}
let { class: className, duration = '.5s', mediaData, ...props } = Astro.props;
const { videos, images, alts, width, height, format } = mediaData;
const videoUrls = Object.keys(videos).map((key) => {
  return key.replace(/\/public(.+)/, '$1');
});
const videoSrcs = videoUrls.join(',');
const firstVideoUrl = videoUrls[0];
const imageUrls = Object.keys(images);
---

<section id="container13" class={className} {...props}>
  <video class="video" autoplay muted loop data-srcs={videoSrcs}>
    <source src={firstVideoUrl} type="video/mp4" />
  </video>
  <ul data-style="none" class="navigation">
    {
      imageUrls.map((imageUrl, idx) => {
        // prettier-ignore
        return (<li><Image src={images[imageUrl]()} alt={alts[idx]} width={width} height={height} format={format} /></li>);
      })
    }
  </ul>
</section>

<style define:vars={{ duration }}>
  #container13 {
    position: relative;
    height: 100%;
    video {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    .navigation {
      display: flex;
      position: absolute;
      bottom: 5%;
      left: 50%;
      justify-content: center;
      align-items: center;
      gap: 0.5rem;
      transform: translateX(-50%);
      z-index: 100;
      li {
        opacity: 0.7;
        cursor: pointer;
        background-color: #fff;
        padding: 1px;

        img {
          width: var(--img-width);
          height: auto;
        }
        &,
        & img {
          transition: var(--duration);
        }
        &:hover {
          opacity: 1;
          img {
            width: calc(var(--img-width) / 3 * 5);
          }
        }
      }
    }
  }
</style>

<script>
  const container = document.getElementById('container13') as HTMLDivElement;
  const video = container.querySelector('.video') as HTMLVideoElement;
  const thumbs = container.querySelectorAll(
    'ul li'
  ) as NodeListOf<HTMLLIElement>;
  const videoSrcs = video.dataset.srcs?.split(',');

  const containerWidth = container.clientWidth;
  container.style.cssText = `--img-width: ${containerWidth / 10}px`;
  // thumbs linsteners
  thumbs.forEach((thumb, idx) => {
    thumb.addEventListener('click', () => {
      video.src = videoSrcs?.[idx] || '';
    });
  });
</script>
