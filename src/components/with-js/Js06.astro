---
import img1 from '@/images/with-js06/img1.jpg';
import img2 from '@/images/with-js06/img2.jpg';
import img3 from '@/images/with-js06/img3.jpg';
import { Image } from 'astro:assets';

interface Props {
  class?: string;
  duration?: string;
  text?: string;
  colors?: string;
}
const {
  class: className,
  duration = '1s',
  text = 'JAVASCRIPT 06',
  colors = '#22e7c0, #ffb62e',
  ...props
} = Astro.props;

const [circle1Color, circle2Color] = colors.split(',');

const regex = /(?<quantity>[\d\.]+)(?<unit>[a-z]+)/;
const result = duration.match(regex)!;
let quantity = +result.groups?.quantity!;
const unit = result.groups?.unit!;
const imgHeight = 200;
---

<div id="container06" class={className} {...props}>
  <section class="sec1 show-animate">
    <h3 class="animate">First Section</h3>
    <p class="animate">Animation on Scroll HTML, CSS and JavaScript</p>
  </section>
  <section class="sec2 show-animate">
    <h3 class="animate">Second Section</h3>
    <p class="animate">Animation on Scroll HTML, CSS and JavaScript</p>
  </section>
  <section class="sec3 show-animate">
    <h3 class="animate">Third Section</h3>
    <p class="animate">Animation on Scroll HTML, CSS and JavaScript</p>
  </section>
  <section class="sec4 show-animate">
    <h3 class="animate">Fourth Section</h3>
    <p class="animate">Animation on Scroll HTML, CSS and JavaScript</p>
  </section>
  <section class="sec5 show-animate">
    <div class="images">
      <Image src={img1} alt="img1" class="animate" height={imgHeight} />
      <Image src={img2} alt="img2" class="animate" height={imgHeight} />
      <Image src={img3} alt="img3" class="animate" height={imgHeight} />
    </div>
  </section>
</div>

<style define:vars={{ circle1Color, circle2Color }}>
  #container06 {
    position: relative;
    height: 100%;
    overflow-y: scroll;

    section {
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      height: 100%;
      overflow: hidden;
      &.sec1 {
        background-color: #1f242d;
        p {
          color: #0ef;
        }
      }
      &.sec2 {
        background-color: #601e9e;
        p {
          color: #0f0;
        }
      }
      &.sec3 {
        background-color: #056964;
        p {
          color: #ff0;
        }
      }
      &.sec4 {
        background-color: #ffa600;
        p {
          color: #056964;
        }
      }
      &.sec5 {
        background-color: #ff0055;
        .images {
          display: flex;
          justify-content: center;
          gap: 20px;
          width: 100%;
          img {
            max-width: 25%;
            height: auto;
          }
        }
      }
      h3 {
        color: #fff;
        font-size: 2em;
      }
      p {
        font-size: 1.2em;
      }
    }
  }
  /* scrolling styles */
  section .animate {
    opacity: 0;
    filter: blur(5px);
    transition: 0.5s;
  }

  section.show-animate .animate {
    opacity: 1;
    filter: blur(0px);
  }

  .sec2 .animate {
    transform: translateX(100%);
  }

  .sec2.show-animate .animate {
    transform: translateX(0);
  }

  .sec3 .animate {
    transform: scale(0.7);
  }

  .sec3.show-animate .animate {
    transform: scale(1);
  }

  .sec4 .animate {
    transform: rotate(30deg);
  }

  .sec4.show-animate .animate {
    transform: rotate(0deg);
  }

  .sec5 .animate {
    transform: translateX(100%) rotate(-90deg);
  }

  .sec5.show-animate .animate {
    transform: translateX(0) rotate(0deg);
  }

  p.animate {
    transition-delay: 0.2s;
  }

  .sec5 img:nth-child(2) {
    transition-delay: 0.2s;
  }

  .sec5 img:nth-child(3) {
    transition-delay: 0.4s;
  }
</style>

<script>
  const container = document.getElementById('container06') as HTMLDivElement;
  const sections = container.querySelectorAll(
    'section'
  ) as NodeListOf<HTMLDivElement>;

  container.addEventListener('scroll', () => {
    sections.forEach((section) => {
      const scrollDistance = container.scrollTop;
      // distance from top of positioned parent element (layout view, not visual view)
      const secDistance = section.offsetTop;
      console.log('ðŸš€ ~ :181 ~ secDistance:', secDistance);
    });
  });
</script>
