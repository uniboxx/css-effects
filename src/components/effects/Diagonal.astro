---
interface Props {
  boxSize: string;
  duration: string;
  fontSize: string;
  backgroundColor: string;
  color: string;
  hoverColor: string;
}
const { boxSize, duration, fontSize, backgroundColor, color, hoverColor } =
  Astro.props;
const sizes = boxSize.split('x');
const boxUnit = sizes[0].match(/[^\d\.]+/)?.[0];

const [width, height] = sizes;
const diagSize =
  Math.ceil(Math.sqrt(parseFloat(width) ** 2 + parseFloat(height) ** 2) * 10) /
    10 +
  boxUnit!;
---

<div class="icon">
  <slot />
</div>

<style
  define:vars={{
    width,
    height,
    fontSize,
    duration,
    backgroundColor,
    color,
    hoverColor,
    diagSize,
  }}
>
  .icon {
    display: flex;
    position: relative;
    justify-content: center;
    align-items: center;
    box-shadow: 0 5px 15px -5px #00000070;
    border-radius: 30%;
    background-color: var(--backgroundColor);
    width: var(--width);
    height: var(--height);
    overflow: hidden;
    color: var(--color);
    font-size: var(--fontSize);
    svg {
      transition: var(--duration);
    }
    &::before {
      position: absolute;
      bottom: calc(var(--diagSize) * -1);
      left: calc(var(--diagSize) * -1);
      transform: rotate(45deg) translateY(-25%);
      transition: var(--duration) cubic-bezier(0.17, 0.67, 0.88, 1.53);
      background-color: var(--color);
      width: var(--diagSize);
      height: var(--diagSize);
      pointer-events: none;
      content: '';
    }

    &:hover {
      svg {
        transform: scale(1.3);
        color: var(--hoverColor);
      }
      &::before {
        transform: rotate(45deg) translateY(-125%);
      }
    }
  }
</style>
