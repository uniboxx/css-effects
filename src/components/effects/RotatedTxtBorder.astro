---
interface Props {
  duration: string;
  delay: string;
  width: string;
}
const { duration, delay, width } = Astro.props;
const height = width;
---

<div class="container">
  <slot /><span class="box"></span><span class="box"></span><span class="box"
  ></span><span class="box"></span>
</div>

<style define:vars={{ duration, delay, width, height }}>
  .container {
    display: flex;
    position: relative;
    position: relative;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    padding: 20px;
    width: var(--width);
    height: var(--height);

    .box {
      position: absolute;
      top: 0;
      left: 0;
      transition: var(--duration);
      border: solid #58c747;
      width: 100%;
      height: 100%;
      content: '';

      &:nth-of-type(1),
      &:nth-of-type(3) {
        border-width: 4px 0 4px 0;
      }
      &:nth-of-type(2),
      &:nth-of-type(4) {
        border-width: 0 4px 0 4px;
      }
      &:nth-of-type(1) {
        transform: scaleX(0);
      }
      &:nth-of-type(3) {
        transform: rotate(45deg) scaleX(0);
      }
      &:nth-of-type(2) {
        transform: scaleY(0);
      }
      &:nth-of-type(4) {
        transform: rotate(45deg) scaleY(0);
      }
    }

    &:hover {
      .box {
        &:nth-of-type(1) {
          transform: scaleX(1);
        }
        &:nth-of-type(2) {
          transform: scaleY(1);
          transition-delay: calc(var(--delay));
        }
        &:nth-of-type(3) {
          transform: rotate(45deg) scaleX(1);
          transition-delay: calc(var(--delay) * 2);
        }
        &:nth-of-type(4) {
          transform: rotate(45deg) scaleY(1);
          transition-delay: calc(var(--delay) * 3);
        }
      }
    }
  }
</style>
