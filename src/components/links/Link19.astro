---
/*
INFORMATIONS
set optionally:
- class 
- duration as string 'value and s | ms' 
- colors as string 'bandColor, hoverBgColor, hoverColor' 
*/

type Tag = 'a' | 'button';
type AnchorProps = {
  href: string;
};
type ButtonProps = {
  type?: 'submit' | 'reset' | 'button';
};

// prettier-ignore
type Props<TagGeneric extends Tag> = {
  tag?: TagGeneric;
  class?: string;
  duration?: string;
  colors?: string;
  [key: string]: string | string[] | undefined;
} & (TagGeneric extends 'a' ? AnchorProps : ButtonProps);

const {
  href,
  tag: Tag = href ? 'a' : 'button',
  type,
  class: classList,
  duration = '.25s',
  colors = '#fff, #262626, #fff',
  ...rest
} = Astro.props;

const attributesBasedOnTag = Tag === 'a' ? { href } : { type };
const { ...attrs } = { ...attributesBasedOnTag, ...rest };

const [bandColor, hoverBgColor, hoverColor] = colors.split(',');

const style = `--duration: ${duration}; --bandColor: ${bandColor};--hoverBgColor: ${hoverBgColor};--hoverColor: ${hoverColor};`;
---

<Tag class={classList} {...attrs} style={style}>
  <slot />
  <span></span>
</Tag>

<style>
  a,
  button {
    display: flex;
    position: relative;
    justify-content: center;
    align-items: center;
    transition: var(--duration);
    cursor: pointer;
    overflow: hidden;
    span {
      position: absolute;
      top: 0;
      left: 0;
      z-index: -1;
      width: 100%;
      height: 100%;

      &::before {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%) rotate(-60deg);
        transition: var(--duration);
        background-color: var(--bandColor);
        width: 8%;
        height: 500%;
        content: '';
      }
    }

    &:hover {
      color: var(--hoverColor);
      span::before {
        transform: translate(-50%, -50%) rotate(60deg);
        background-color: var(--hoverBgColor);
        width: 100%;
      }
    }
  }
</style>
