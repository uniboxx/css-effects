---
/*
INFORMATIONS
set optionally:
- class 
- duration as string 'value and s | ms' 
- colors as string 'borderColor' 
- borderSize as string
*/

type Tag = 'a' | 'button';
type AnchorProps = {
  href: string;
};
type ButtonProps = {
  type?: 'submit' | 'reset' | 'button';
};

// prettier-ignore
type Props<TagGeneric extends Tag> = {
  tag?: TagGeneric;
  class?: string;
  duration?: string;
  colors?: string;
  borderSize?: string;
  [key: string]: string | string[] | undefined;
} & (TagGeneric extends 'a' ? AnchorProps : ButtonProps);

const {
  href,
  tag: Tag = href ? 'a' : 'button',
  type,
  class: classList,
  duration = '.25s',
  colors = '#c47135',
  borderSize = '3px',
  ...rest
} = Astro.props;

const attributesBasedOnTag = Tag === 'a' ? { href } : { type };
const { ...attrs } = { ...attributesBasedOnTag, ...rest };

const [borderColor] = colors.split(',');

const style = `--duration: ${duration}; --borderColor: ${borderColor};--borderSize: ${borderSize} `;
---

<Tag class={classList} {...attrs} style={style}><slot /></Tag>

<style>
  a,
  button {
    display: flex;
    position: relative;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    background: var(--borderColor);

    &::before,
    &::after {
      position: absolute;
      transition: var(--duration);
      width: 1.4rem;
      height: 1.4rem;
      content: '';
    }

    &::before {
      top: -6px;
      left: -6px;
      border-top: var(--borderSize) solid var(--borderColor);
      border-left: var(--borderSize) solid var(--borderColor);
    }
    &::after {
      right: -6px;
      bottom: -6px;
      border-right: var(--borderSize) solid var(--borderColor);
      border-bottom: var(--borderSize) solid var(--borderColor);
    }

    &:hover {
      &::before,
      &::after {
        width: 100%;
        height: 100%;
      }
    }
  }
</style>
