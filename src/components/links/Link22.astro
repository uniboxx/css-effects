---
/*
INFORMATIONS
set optionally:
- class 
- duration as string 'value and s | ms' 
- colors as string 'hoverBgColor, hoverColor' 
*/
import type { Polymorphic } from 'astro/types';

type Tag = 'a' | 'button';

// prettier-ignore
type Props<TagGeneric extends Tag> = {
  class?: string;
  duration?: string;
  colors?: string;
} & Polymorphic<{ as: TagGeneric }>;

const {
  class: classList,
  duration = '.5s',
  colors = '#250e74, #fafafa',
  ...attrs
} = Astro.props;

const Tag = attrs.href ? 'a' : 'button';

const [hoverBgColor, hoverColor] = colors.split(',');
const style = `--duration: ${duration}; --hoverBgColor: ${hoverBgColor}; --hoverColor: ${hoverColor};`;
---

<Tag class:list={[classList, 'tag22']} {...attrs} style={style}><slot /></Tag>

<style>
  a,
  button {
    display: flex;
    position: relative;
    justify-content: center;
    align-items: center;
    z-index: 0;
    transition: var(--duration);
    cursor: pointer;
    overflow: hidden;

    &::before,
    &::after {
      position: absolute;
      z-index: -1;
      transition: var(--duration);
      inset: 0;
      border-top: var(--borderSize) solid var(--hoverBgColor);
      border-bottom: var(--borderSize) solid var(--hoverBgColor);
      content: '';
    }
    &::before {
      transform: translateX(-100%);
      border-right: var(--borderSize) solid transparent;
    }
    &::after {
      transform: translateX(100%);
      border-left: var(--borderSize) solid transparent;
    }

    &:hover {
      border-color: var(--hoverBgColor);
      color: var(--hoverColor);
      &::before,
      &::after {
        transform: translateX(0);
      }
    }
  }
</style>

<script>
  const link = document.querySelector('.tag22')! as
    | HTMLAnchorElement
    | HTMLButtonElement;

  const height = link?.clientHeight;
  const halfHeight = `${height / 2}px`;

  link.style.cssText += `--borderSize: ${halfHeight}`;
</script>
