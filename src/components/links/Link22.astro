---
import type { HTMLAttributes } from 'astro/types';

interface Props extends HTMLAttributes<'button'> {
  class?: string;
  duration?: string;
  colors?: string;
}
const {
  class: className,
  duration = '.5s',
  colors = '#250e74, #fafafa',
  ...props
} = Astro.props;
const [primaryColor, secondaryColor] = colors?.split(',');
---

<button class={className} {...props}>
  <slot />
</button>

<style define:vars={{ duration, primaryColor, secondaryColor }}>
  button {
    --button-height: 88px;
    --button-border-size: 4px;
    --before-border-size: calc(
      (var(--button-height) - 2 * var(--button-border-size)) / 2
    );
    display: flex;
    position: relative;
    justify-content: center;
    align-items: center;
    z-index: 0;
    transition: var(--duration);
    cursor: pointer;
    border: var(--button-border-size) solid;
    border-color: var(--primaryColor);
    background-color: transparent;
    padding: 0.5rem 0.7rem;
    height: var(--button-height);
    overflow: hidden;
    color: var(--primaryColor);
    font-size: 2rem;
    line-height: 1;

    &::before,
    &::after {
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      z-index: -1;
      transition: var(--duration);
      border-top: var(--before-border-size) solid var(--primaryColor);
      border-bottom: var(--before-border-size) solid var(--primaryColor);
      content: '';
    }
    &::before {
      transform: translateX(-100%);
      border-right: var(--before-border-size) solid transparent;
    }
    &::after {
      transform: translateX(100%);
      border-left: var(--before-border-size) solid transparent;
    }

    &:hover {
      color: var(--secondaryColor);
      &::before,
      &::after {
        transform: translateX(0);
      }
    }
  }
</style>
