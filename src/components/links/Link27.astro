---
/*
INFORMATIONS
set optionally:
- class 
- duration as string 'value and s | ms' 
- colors as string 'hoverBgColor, hoverColor'
- number as number of slices
*/

type Tag = 'a' | 'button';
type AnchorProps = {
  href: string;
};
type ButtonProps = {
  type?: 'submit' | 'reset' | 'button';
};

// prettier-ignore
type Props<TagGeneric extends Tag> = {
  tag?: TagGeneric;
  class?: string;
  duration?: string;
  colors?: string;
  number?:number;
  [key: string]: string | string[] | number | undefined;
} & (TagGeneric extends 'a' ? AnchorProps : ButtonProps);

const {
  href,
  tag: Tag = href ? 'a' : 'button',
  type,
  class: classList,
  duration = '.3s',
  colors = '#222, #ff0',
  number = 4,
  ...rest
} = Astro.props;

const attributesBasedOnTag = Tag === 'a' ? { href } : { type };
const { ...attrs } = { ...attributesBasedOnTag, ...rest };

const [hoverBgColor, hoverColor] = colors.split(',');
const width = 100 / number;
const regex = /(?<quantity>[\d\.]+)(?<unit>[a-z]+)/;
const result = duration.match(regex)!;
const quantity = +result.groups?.quantity!;
const unit = result.groups?.unit!;
const style = `--duration: ${duration}; --hoverBgColor: ${hoverBgColor};--hoverColor: ${hoverColor};--width: ${width}%`;
---

<Tag class={classList} {...attrs} style={style}>
  <slot />
  {
    Array.from({ length: number }).map((_, idx) => {
      return (
        <span
          style={`transition-delay: ${(quantity / number) * idx}${unit};left: ${width * idx}%`}
        />
      );
    })
  }
</Tag>

<style>
  a,
  button {
    display: flex;
    position: relative;
    justify-content: center;
    align-items: center;
    gap: 1rem;
    transition: calc(var(--duration) / 2) calc(var(--duration) / 2);
    color: inherit;
    text-decoration: none;

    span {
      position: absolute;
      top: 0;
      transform: scaleY(0);
      transform-origin: top;
      z-index: -1;
      transition: var(--duration);
      background-color: var(--hoverBgColor);
      width: var(--width);
      height: 100%;
      content: '';
    }
    &:hover {
      color: var(--hoverColor);
      span {
        transform: scaleY(1);
      }
    }
  }
</style>
