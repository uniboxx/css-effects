---
/*
INFORMATIONS
set optionally:
- class 
- duration as string 'value and s | ms' 
- colors as string 'hoverBgColor, hoverColor' 
*/

type Tag = 'a' | 'button';
type AnchorProps = {
  href: string;
};
type ButtonProps = {
  type?: 'submit' | 'reset' | 'button';
};

// prettier-ignore
type Props<TagGeneric extends Tag> = {
  tag?: TagGeneric;
  class?: string;
  duration?: string;
  colors?: string;
  [key: string]: string | string[] | undefined;
} & (TagGeneric extends 'a' ? AnchorProps : ButtonProps);

const {
  href,
  tag: Tag = href ? 'a' : 'button',
  type,
  class: classList,
  duration = '.3s',
  colors = '#f44336, #fff',
  ...rest
} = Astro.props;

const attributesBasedOnTag = Tag === 'a' ? { href } : { type };
const { ...attrs } = { ...attributesBasedOnTag, ...rest };

const [hoverBgColor, hoverColor] = colors.split(',');

const style = `--duration: ${duration}; --hoverBgColor: ${hoverBgColor}; --hoverColor: ${hoverColor};`;
---

<Tag class={classList} {...attrs} style={style}><slot /></Tag>

<style>
  a,
  button {
    display: flex;
    position: relative;
    justify-content: center;
    align-items: center;
    transition: var(--duration) ease-in-out;
    cursor: pointer;
    overflow: hidden;
    &::before {
      position: absolute;
      bottom: 0;
      left: 0;
      transform: translateX(-50%) translateY(100%) rotate(45deg);
      transform-origin: top;
      transition: var(--duration) ease-in-out;
      background-color: white;
      width: 100%;
      height: 3rem;
      content: '';
    }

    &:hover {
      background-color: var(--hoverBgColor);
      color: var(--hoverColor);
      &::before {
        top: 0;
        transform: translateX(50%) translateY(-100%) rotate(45deg);
        transform-origin: bottom;
      }
    }
  }
</style>
