---
/*
INFORMATIONS
set optionally:
- class 
- duration as string 'value and s | ms' 
- colors as string 'hoverBgColor, hoverColor' 
*/
import type { Polymorphic } from 'astro/types';

type Tag = 'a' | 'button';

// prettier-ignore
type Props<TagGeneric extends Tag> = {
  class?: string;
  duration?: string;
  colors?: string;
} & Polymorphic<{ as: TagGeneric }>;

const {
  class: classList,
  duration = '.3s',
  colors = '#f44336, #fff',
  ...attrs
} = Astro.props;

const Tag = attrs.href ? 'a' : 'button';

const [hoverBgColor, hoverColor] = colors.split(',');
---

<Tag
  class={classList}
  {...attrs}
  style={`--duration: ${duration}; --hoverBgColor: ${hoverBgColor}; --hoverColor: ${hoverColor};`}
  ><slot /></Tag
>

<style>
  a,
  button {
    display: flex;
    position: relative;
    justify-content: center;
    align-items: center;
    transition: var(--duration) ease-in-out;
    cursor: pointer;
    overflow: hidden;
    &::before {
      position: absolute;
      bottom: 0;
      left: 0;
      transform: translateX(-50%) translateY(100%) rotate(45deg);
      transform-origin: top;
      transition: var(--duration) ease-in-out;
      background-color: white;
      width: 100%;
      height: 3rem;
      content: '';
    }

    &:hover {
      background-color: var(--hoverBgColor);
      color: var(--hoverColor);
      &::before {
        top: 0;
        transform: translateX(50%) translateY(-100%) rotate(45deg);
        transform-origin: bottom;
      }
    }
  }
</style>
