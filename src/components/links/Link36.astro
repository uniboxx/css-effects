---
/*
INFORMATIONS
set optionally:
- class 
- duration as string 'value and s | ms' 
- colors as string 'color1, color2' 
*/

type Tag = 'a' | 'button';
type AnchorProps = {
  href: string;
};
type ButtonProps = {
  type?: 'submit' | 'reset' | 'button';
};

// prettier-ignore
type Props<TagGeneric extends Tag> = {
  tag?: TagGeneric;
  class?: string;
  duration?: string;
  colors?: string;
  borderWidth?:string;
  [key: string]: string | string[] | undefined;
} & (TagGeneric extends 'a' ? AnchorProps : ButtonProps);

const {
  href,
  tag: Tag = href ? 'a' : 'button',
  type,
  class: classList,
  duration = '.5s',
  colors = '#262626, #3bffa7',
  borderWidth = '8px',
  ...rest
} = Astro.props;

const attributesBasedOnTag = Tag === 'a' ? { href } : { type };
const { ...attrs } = { ...attributesBasedOnTag, ...rest };

const [color1, color2] = colors.split(',');

const style = `--duration: ${duration}; --color1: ${color1}; --color2: ${color2};--color1: ${color1}; --borderWidth: ${borderWidth};`;
const randClass = 'link' + Math.random().toString(36).slice(2, 11);
console.log('ðŸš€ ~ :46 ~ randClass:', randClass);
---

<Tag class:list={[classList, randClass]} {...attrs} style={style}
  ><slot /><span><slot /></span></Tag
>

<style>
  a,
  button {
    position: relative;
    transition: var(--duration);
    transition-delay: var(--duration);
    width: max-content;
    color: var(--color1);
    font-weight: 700;
    font-size: 1.3rem;
    text-decoration: none;

    &,
    span {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 1rem;
      height: 100%;
    }

    span {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      opacity: 0;
      transition: var(--duration);
      transition-delay: 0s;
      width: max-content;
      height: 100%;
      -webkit-text-stroke: 1px solid #000;
      pointer-events: none;
      color: var(--color2);
      font: inherit;
      font-weight: 500;
      letter-spacing: 1.5rem;
      text-shadow:
        0 0 10px var(--color2),
        0 0 30px var(--color2),
        0 0 80px var(--color2);
      text-transform: uppercase;
    }

    &:hover {
      transition-delay: 0s;
      color: #ffffff1a !important;
      span {
        opacity: 1;
        transition-delay: var(--duration);
        letter-spacing: 0.15rem;
      }
    }
  }
</style>

<script define:vars={{ randClass }}>
  const link36 = document.querySelector(`.${randClass}`);
  const span = link36.querySelector('span');

  const linkFontSize = parseFloat(getComputedStyle(link36).fontSize);
  span.style.fontSize = `${linkFontSize * 0.9}px`;
</script>
