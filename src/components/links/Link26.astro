---
/*
INFORMATIONS
set optionally:
- class 
- duration as string 'value and s | ms' 
- colors as string 'hoverBgColor, hoverColor'
- size as height of lines
- borderWidth as string
*/

type Tag = 'a' | 'button';
type AnchorProps = {
  href: string;
};
type ButtonProps = {
  type?: 'submit' | 'reset' | 'button';
};

// prettier-ignore
type Props<TagGeneric extends Tag> = {
  tag?: TagGeneric;
  class?: string;
  duration?: string;
  colors?: string;
  size?:string;
  borderWidth?:string;
  [key: string]: string | string[] | undefined;
} & (TagGeneric extends 'a' ? AnchorProps : ButtonProps);

const {
  href,
  tag: Tag = href ? 'a' : 'button',
  type,
  class: classList,
  duration = '.5s',
  colors = '#e91e63, #fff',
  size = '.6rem',
  borderWidth = '3px',
  ...rest
} = Astro.props;

const attributesBasedOnTag = Tag === 'a' ? { href } : { type };
const { ...attrs } = { ...attributesBasedOnTag, ...rest };

const [hoverBgColor, hoverColor] = colors.split(',');
const style = `--duration: ${duration}; --hoverBgColor: ${hoverBgColor};--hoverColor: ${hoverColor};--size: ${size};--borderWidth: ${borderWidth}`;
---

<Tag class={classList} {...attrs} style={style}><slot /></Tag>

<style>
  a,
  button {
    display: flex;
    position: relative;
    justify-content: center;
    align-items: center;
    gap: 1rem;
    transition: var(--duration);
    cursor: pointer;
    width: max-content;
    color: inherit;
    text-decoration: none;
    &::before,
    &::after {
      position: absolute;
      opacity: 0;
      transition: calc(var(--duration) / 5 * 3);
      border: solid var(--hoverBgColor);
      width: var(--size);
      height: var(--size);
      content: '';
    }
    &::before {
      bottom: var(--size);
      left: var(--size);
      border-width: 0 0 var(--borderWidth) var(--borderWidth);
    }
    &::after {
      top: var(--size);
      right: var(--size);
      border-width: var(--borderWidth) var(--borderWidth) 0 0;
    }
    &:hover {
      transition-delay: calc(var(--duration) / 2);
      background-color: var(--hoverBgColor);
      color: var(--hoverColor);
      &::before,
      &::after {
        opacity: 1;
      }
      &::before {
        bottom: calc(var(--size) * -0.65);
        left: calc(var(--size) * -0.65);
      }
      &::after {
        top: calc(var(--size) * -0.65);
        right: calc(var(--size) * -0.65);
      }
    }
  }
</style>
