---
/*
INFORMATIONS
set optionally:
- class 
- duration as string 'value and s | ms' 
- colors as string 'hoverBgColor, hoverColor' 
*/
import type { Polymorphic } from 'astro/types';

type Tag = 'a' | 'button';

// prettier-ignore
type Props<TagGeneric extends Tag> = {
  class?: string;
  duration?: string;
  colors?: string;
} & Polymorphic<{ as: TagGeneric }>;

const {
  class: classList,
  duration = '.5s',
  colors = '#363636, #ff0',
  ...attrs
} = Astro.props;

const Tag = attrs.href ? 'a' : 'button';

const [bgColor, color] = colors.split(',');
---

<Tag
  class={classList}
  {...attrs}
  style={`--duration: ${duration};--bgColor: ${bgColor};--color: ${color};`}
  ><slot />
  <div class="before"><slot /></div>
  <div class="after"><slot /></div>
</Tag>

<style>
  a,
  button {
    position: relative;
    cursor: pointer;
    overflow-x: hidden;
    color: transparent !important;

    .before,
    .after {
      display: flex;
      position: absolute;
      top: 0;
      justify-content: center;
      align-items: center;
      transition: var(--duration);
      cursor: pointer;
      background: var(--bgColor);
      width: 100%;
      height: 100%;
      color: var(--color);
    }

    .before {
      left: -100%;
      transform: scale(0) rotateY(0deg);
      opacity: 0;
      pointer-events: none;
    }
    .after {
      left: 0;
    }

    &:hover {
      .before {
        left: 0;
        transform: scale(1) rotateY(360deg);
        opacity: 1;
      }
      .after {
        left: 100%;
        transform: scale(0) rotateY(360deg);
        opacity: 0;
      }
    }
  }
</style>
