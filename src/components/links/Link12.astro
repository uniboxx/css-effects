---
/*
INFORMATIONS
set optionally:
- class 
- duration as string 'value and s | ms' 
- colors as string 'hoverBgColor, hoverColor' 
*/
import type { Polymorphic } from 'astro/types';

type Tag = 'a' | 'button';

// prettier-ignore
type Props<TagGeneric extends Tag> = {
  class?: string;
  duration?: string;
  colors?: string;
} & Polymorphic<{ as: TagGeneric }>;

const {
  class: classList,
  duration = '.5s',
  colors = '#ff0, #363636',
  ...attrs
} = Astro.props;

const Tag = attrs.href ? 'a' : 'button';

const [hoverBgColor, hoverColor] = colors.split(',');
---

<Tag
  class={classList}
  {...attrs}
  style={`--duration: ${duration};--hoverBgColor: ${hoverBgColor};--hoverColor: ${hoverColor};`}
>
  <div class="bg-only"></div>
  <slot />
</Tag>

<style>
  a,
  button {
    display: flex;
    position: relative;
    flex: 1;
    justify-content: center;
    align-items: center;
    z-index: 0;
    transition: var(--duration);
    transition-delay: calc(var(--duration) / 1.5);
    cursor: pointer;

    &::before,
    &::after {
      position: absolute;
      top: 50%;
      transform: translateY(-50%);
      opacity: 0;
      z-index: -1;
      transition: var(--duration);
      transition-delay: calc(var(--duration) / 1.5);
      border-radius: 50%;
      background: var(--hoverBgColor);
      width: 20px;
      height: 20px;
      pointer-events: none;
      content: '';
    }
    &::before {
      left: 0;
      box-shadow: -100px 0 0 var(--hoverBgColor);
    }
    &::after {
      right: 0;
      box-shadow: 100px 0 0 var(--hoverBgColor);
    }
    .bg-only {
      position: absolute;
      top: 0;
      left: 0;
      transform: scale(0);
      z-index: -1;
      transition: var(--duration);
      transition-delay: 0;
      border-radius: inherit;
      background: var(--hoverBgColor);
      width: 100%;
      height: 100%;
    }

    &:hover {
      color: var(--hoverColor);
      &::before,
      &::after {
        opacity: 1;
        transition-delay: 0s;
      }
      &::before {
        left: 50%;
        transform: translate(-50%, -50%);
        box-shadow: 30px 0 0 var(--hoverBgColor);
      }
      &::after {
        right: 50%;
        transform: translate(50%, -50%);
        box-shadow: -30px 0 0 var(--hoverBgColor);
      }
      .bg-only {
        transform: scale(1);
        transition-delay: var(--duration);
      }
    }
  }
</style>
