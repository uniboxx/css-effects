---
/*
INFORMATIONS
set optionally:
- class 
- duration as string 'value and s | ms' 
- colors as string 'hoverBgColor, hoverColor' 
*/
import type { Polymorphic } from 'astro/types';

type Tag = 'a' | 'button';

// prettier-ignore
type Props<TagGeneric extends Tag> = {
  class?: string;
  duration?: string;
  colors?: string;
} & Polymorphic<{ as: TagGeneric }>;

const {
  class: classList,
  duration = '.2s',
  colors = '#f6b93b,  #363636',
  ...attrs
} = Astro.props;

const Tag = attrs.href ? 'a' : 'button';

const [hoverBgColor, hoverColor] = colors.split(',');
---

<Tag
  class={classList}
  {...attrs}
  style={`--duration: ${duration}; --hoverBgColor: ${hoverBgColor}; --hoverColor: ${hoverColor};--delay: calc(var(--duration)/2)`}
>
  <span>
    <slot />
  </span>
</Tag>

<style>
  a,
  button {
    display: flex;
    position: relative;
    justify-content: center;
    align-items: center;
    z-index: 0;
    transition: var(--duration);
    cursor: pointer;
    overflow: hidden;

    &::before,
    &::after,
    span::before,
    span::after {
      position: absolute;
      z-index: -1;
      transition-duration: var(--duration);
      background-color: var(--hoverBgColor);
      width: 25%;
      height: 100%;
      content: '';
    }
    &::before,
    span::before {
      top: 100%;
    }
    &::after,
    span::after {
      top: -100%;
    }
    &::before {
      left: 0%;
    }
    &::after {
      left: 25%;
      transition-delay: var(--delay);
    }
    span::before {
      left: 50%;
      transition-delay: calc(var(--delay) * 2);
    }
    span::after {
      left: 75%;
      transition-delay: calc(var(--delay) * 3);
    }

    &:hover {
      color: var(--hoverColor);
      &::before,
      &::after,
      span::before,
      span::after {
        top: 0%;
      }
    }
  }
</style>
