---
/*
INFORMATIONS
set optionally:
- class 
- duration as string 'value and s | ms' 
- colors as string 'hoverBgColor, hoverColor' 
*/
import type { Polymorphic } from 'astro/types';

type Tag = 'a' | 'button';

// prettier-ignore
type Props<TagGeneric extends Tag> = {
  class?: string;
  duration?: string;
  colors?: string;
} & Polymorphic<{ as: TagGeneric }>;

const {
  class: classList,
  duration = '.4s',
  colors = '#fdc518, #f00',
  ...attrs
} = Astro.props;

const Tag = attrs.href ? 'a' : 'button';

const [color1, color2] = colors.split(',');
---

<Tag
  class={classList}
  {...attrs}
  style={`--duration: ${duration}; --color1: ${color1}; --color2: ${color2};`}
  ><slot /></Tag
>

<style>
  a,
  button {
    display: flex;
    position: relative;
    justify-content: center;
    align-items: center;
    cursor: pointer;

    &::before,
    &::after {
      position: absolute;
      transition-duration: var(--duration);
      width: var(--width);
      height: var(--height);
      content: '';
    }

    &::before {
      --width: 80%;
      --height: 140%;
      top: calc(100 - var(--width) / -2);
      left: calc(100 - var(--width) / 2);
      border-right: 2px solid var(--color2);
      border-left: 2px solid var(--color1);
    }
    &::after {
      --width: 110%;
      --height: 80%;
      top: calc(100 - var(--width) / 2);
      left: calc(100 - var(--width) / -2);
      transition-delay: var(--duration);
      border-top: 2px solid var(--color1);
      border-bottom: 2px solid var(--color2);
    }

    &:hover {
      &::before {
        transform: rotateY(180deg);
      }
      &::after {
        transform: rotateX(180deg);
      }
    }
  }
</style>
