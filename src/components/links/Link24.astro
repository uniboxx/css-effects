---
/*
INFORMATIONS
set optionally:
- class 
- duration as string 'value and s | ms' 
- colors as string 'hoverBgColor, hoverColor' 
*/

type Tag = 'a' | 'button';
type AnchorProps = {
  href: string;
};
type ButtonProps = {
  type?: 'submit' | 'reset' | 'button';
};

// prettier-ignore
type Props<TagGeneric extends Tag> = {
  tag?: TagGeneric;
  class?: string;
  duration?: string;
  colors?: string;
  [key: string]: string | string[] | undefined;
} & (TagGeneric extends 'a' ? AnchorProps : ButtonProps);

const {
  href,
  tag: Tag = href ? 'a' : 'button',
  type,
  class: classList,
  duration = '.5s',
  colors = '#ff0461, #ff0',
  ...rest
} = Astro.props;

const attributesBasedOnTag = Tag === 'a' ? { href } : { type };
const { ...attrs } = { ...attributesBasedOnTag, ...rest };

const [hoverBgColor, hoverColor] = colors.split(',');
const style = `--duration: ${duration}; --hoverBgColor: ${hoverBgColor}; --hoverColor: ${hoverColor};`;
---

<Tag class:list={[classList]} style={style} {...rest}>
  <span>
    <slot />
  </span>
</Tag>

<style>
  a,
  button {
    position: relative;
    width: 100%;
    height: 100%;

    &::before,
    &::after {
      position: absolute;
      left: 50%;
      transform: translateX(-50%);
      transition: var(--duration);
      transition-delay: 0s;
      box-shadow:
        0 0 5px var(--hoverBgColor),
        0 0 15px var(--hoverBgColor),
        0 0 30px var(--hoverBgColor),
        0 0 60px var(--hoverBgColor);
      border-radius: 10px;
      background-color: var(--hoverBgColor);
      width: 40px;
      height: 10px;
      content: '';
    }

    &::before {
      bottom: -5px;
    }
    &::after {
      top: -5px;
    }

    span {
      display: flex;
      position: relative;
      justify-content: center;
      align-items: center;
      z-index: 10;
      backdrop-filter: blur(15px);
      transition: var(--duration);
      transition-delay: 0s;
      cursor: pointer;
      box-shadow: 0 15px 35px rgb(0 0 0 / 0.2);
      border-top: 1px solid rgba(255, 131, 131, 0.1);
      border-right: 1px solid #fff4;
      border-bottom: 1px solid rgb(255 255 255 /0.1);
      border-left: 1px solid #fff4;
      border-radius: 30px;
      background-color: #ffffff0d;
      overflow: hidden;

      &::before {
        position: absolute;
        top: 0;
        left: 0;
        transform: skewX(45deg);
        transition: var(--duration) var(--duration);
        background: linear-gradient(to left, #ffffff26, transparent);
        width: 50%;
        height: 100%;
        content: '';
      }
    }
    &:hover {
      transition-delay: var(--duration);
      color: var(--hoverColor);
      &::before,
      &::after {
        transition-delay: var(--duration);
        border-radius: 30px;
        width: 80%;
        height: 50%;
      }
      &::before {
        bottom: 0;
      }
      &::after {
        top: 0;
      }
      span {
        transition-delay: var(--duration);
        border-right: none;
        border-left: none;
        letter-spacing: 3px;
        &::before {
          transform: skewX(45deg) translateX(200%);
          transition-delay: 0s;
        }
      }
    }
  }
</style>
